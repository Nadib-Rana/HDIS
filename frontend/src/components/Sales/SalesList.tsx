import { useEffect, useState } from "react";
import dayjs from "dayjs";
import { api } from "../../utils/api";

type Sale = {
  _id: string;
  customerName?: string;
  total: number;
  discount?: number;
  createdAt: string;
  medicines: { medicineId: { name: string }; quantity: number; price: number }[];
};

export default function SalesList() {
  const [sales, setSales] = useState<Sale[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const load = async () => {
    try {
      const r = await api.get("/api/sales");
      setSales(r.data);
    } catch (err) {
      setError("Failed to load sales.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    load();
  }, []);

  const totalDiscount = sales.reduce((sum, s) => sum + (s.discount || 0), 0);
  const totalSales = sales.reduce((sum, s) => sum + s.total, 0);

  const generateInvoice = (sale: Sale) => {
    const date = dayjs(sale.createdAt).format("DD MMM YYYY HH:mm");
    const invoiceWindow = window.open("", "_blank");
    if (!invoiceWindow) return;

    const subtotal = sale.medicines.reduce(
      (sum, m) => sum + m.quantity * m.price,
      0
    );

    const itemsHTML = sale.medicines
      .map(
        (m, i) => `
        <tr>
          <td style="padding: 8px; border: 1px solid #ddd;">${i + 1}</td>
          <td style="padding: 8px; border: 1px solid #ddd;">${m.medicineId?.name}</td>
          <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${m.quantity}</td>
          <td style="padding: 8px; border: 1px solid #ddd; text-align: right;">${m.price.toFixed(2)}tk</td>
          <td style="padding: 8px; border: 1px solid #ddd; text-align: right;">${(m.quantity * m.price).toFixed(2)}Tk</td>
        </tr>`
      )
      .join("");

    invoiceWindow.document.write(`
      <html>
        <head>
          <title>Invoice - ${sale._id}</title>
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 40px; color: #333; }
            h1, h2, h3 { margin: 0; }
            .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }
            .logo { font-size: 1.5em; font-weight: bold; color: #2563eb; }
            .invoice-meta { text-align: right; font-size: 14px; color: #555; }
            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
            th { background: #2563eb; color: white; text-align: left; padding: 10px; }
            td { padding: 10px; border: 1px solid #ddd; }
            .summary { margin-top: 20px; text-align: right; }
            .summary p { margin: 4px 0; font-size: 14px; }
            .total { font-size: 18px; font-weight: bold; color: #16a34a; }
            .footer { margin-top: 40px; font-size: 12px; color: #777; text-align: center; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo">Homeopathic Inventory</div>
            <div class="invoice-meta">
              <p><strong>Invoice ID:</strong> ${sale._id}</p>
              <p><strong>Date:</strong> ${date}</p>
            </div>
          </div>

          <h2>Invoice</h2>
          <p><strong>Customer:</strong> ${sale.customerName || "N/A"}</p>

          <table>
            <thead>
              <tr>
                <th>No</th>
                <th>Medicine</th>
                <th>Qty</th>
                <th>Price</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              ${itemsHTML}
            </tbody>
          </table>

          <div class="summary">
            <p>Subtotal: ${subtotal.toFixed(2)}Tk</p>
            <p>Discount: ${(sale.discount || 0).toFixed(2)}k</p>
            <p class="total">Total: ${sale.total.toFixed(2)}Tk</p>
          </div>

          <div class="footer">
            <p>Thank you for your purchase!</p>
            <p>Generated by Homeopathic Inventory System</p>
          </div>

          <script>
            window.print();
          </script>
        </body>
      </html>
    `);
    invoiceWindow.document.close();
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow-md">
      <h3 className="text-xl font-bold mb-4 text-gray-800">ðŸ§¾ Recent Sales</h3>

      {loading ? (
        <div className="text-gray-500">Loading sales...</div>
      ) : error ? (
        <div className="text-red-500">{error}</div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <table className="w-full text-sm text-gray-700">
              <thead className="bg-gray-100 text-gray-600 uppercase tracking-wide">
                <tr>
                  <th className="py-3 px-4 text-left">No</th>
                  <th className="py-3 px-4 text-left">Date</th>
                  <th className="py-3 px-4 text-left">Customer</th>
                  <th className="py-3 px-4 text-left">Items</th>
                  <th className="py-3 px-4 text-left">Discount</th>
                  <th className="py-3 px-4 text-left">Total</th>
                  <th className="py-3 px-4 text-left">Actions</th>
                </tr>
              </thead>
              <tbody>
                {sales.map((s, index) => {
                  const subtotal = s.medicines.reduce(
                    (sum, m) => sum + m.quantity * m.price,
                    0
                  );
                  return (
                    <tr
                      key={s._id}
                      className="border-t hover:bg-gray-50 transition"
                    >
                      <td className="py-3 px-4">{index + 1}</td>
                      <td className="py-3 px-4">
                        {dayjs(s.createdAt).format("DD MMM YYYY HH:mm")}
                      </td>
                      <td className="py-3 px-4">{s.customerName || "â€”"}</td>
                      <td className="py-3 px-4">
                        <div className="flex flex-wrap gap-2">
                          {s.medicines.map((m, i) => (
                            <span
                              key={i}
                              className="bg-blue-50 text-blue-700 px-2 py-1 rounded text-xs font-medium"
                            >
                              {m.medicineId?.name} Ã— {m.quantity}
                            </span>
                          ))}
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        {s.discount ? (
                          <span className="text-red-600 font-medium">
                            ${s.discount.toFixed(2)}
                          </span>
                        ) : (
                          "â€”"
                        )}
                      </td>
                      <td className="py-3 px-4 font-semibold text-green-700">
                        ${s.total.toFixed(2)}
                        {s.discount ? (
                          <span className="text-xs text-gray-500 ml-1">
                            (was ${subtotal.toFixed(2)})
                          </span>
                        ) : null}
                      </td>
                      <td className="py-3 px-4">
                        <button
                          onClick={() => generateInvoice(s)}
                          className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded-md text-xs shadow"
                        >
                          Invoice
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
            <div className="bg-gray-50 p-4 rounded-lg border">
              <div className="flex justify-between text-gray-700">
                <span>Total Discount</span>
                <span className="font-bold text-red-600">
                  ${totalDiscount.toFixed(2)}
                </span>
              </div>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg border">
              <div className="flex justify-between text-gray-700">
                <span>Total Sales</span>
                <span className="font-bold text-green-700">
                  ${totalSales.toFixed(2)}
                </span>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
